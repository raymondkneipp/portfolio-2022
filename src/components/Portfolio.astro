---
import Container from './Container.astro';
import { Project } from './Project';

const token = import.meta.env.GITHUB_TOKEN;
const url = 'https://api.github.com/graphql';
const body = JSON.stringify({
	query: `{
					  user(login: "raymondkneipp") {
    					pinnedItems(first: 6, types: [REPOSITORY, GIST]) {
      					edges {
        					node {
          					... on Repository {
            					name
            					createdAt
            					repositoryTopics(first: 20) {
              					nodes {
                					topic {
                  					name
                					}
              					}
            					}
            					description
            					homepageUrl
            					url
            					openGraphImageUrl
          					}
        					}
      					}
    					}
  					}
					}`,
});

const headers = {
	Authorization: `bearer ${token}`,
	'Content-Type': 'application/json',
};
const res = await fetch(url, {
	body,
	headers,
	method: 'POST',
});
const data = await res.json();
const projects = data.data.user.pinnedItems.edges;
---

<Container>
	<section class="py-24 space-y-6" id="website-projects">
		<h2 class="text-4xl text-neutral-100 font-heading font-semibold">
			My Projects
		</h2>

		<div class="grid lg:grid-cols-1 gap-12">
			<Project
				client:load
				url="https://alpost.org"
				image="/alpost.png"
				name="Alpost"
				date="May 2022"
				topics={[
					{ topic: { name: 'typescript' } },
					{ topic: { name: 'react' } },
					{ topic: { name: 'nextjs' } },
					{ topic: { name: 'react-query' } },
					{ topic: { name: 'trpc' } },
					{ topic: { name: 'react-hook-form' } },
					{ topic: { name: 'prisma' } },
					{ topic: { name: 'zod' } },
					{ topic: { name: 'sendgrid' } },
					{ topic: { name: 'headlessui' } },
					{ topic: { name: 'next-auth' } },
					{ topic: { name: 'stripe' } },
				]}
				source={false}
			>
				Feature-rich and easy-to-use online website builder that allows the
				creation of a web presence for American Legion Posts using multi-tenant
				architecture.
			</Project>

			{
				projects.map((project, i) => {
					const {
						name,
						createdAt,
						repositoryTopics,
						description,
						homepageUrl,
						url,
						openGraphImageUrl,
					} = project.node;

					const topics = repositoryTopics.nodes;
					const date = `${new Date(createdAt).toLocaleString('default', {
						month: 'long',
						year: 'numeric',
					})}`;

					return (
						<Project
							client:load
							url={homepageUrl}
							image={openGraphImageUrl}
							name={name}
							date={date}
							topics={topics}
							source={url}
							key={i}
							flip={i % 2 === 0}
						>
							{description}
						</Project>
					);
				})
			}
		</div>
	</section>
</Container>
